// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Model.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Backend.Model.Domain", b =>
                {
                    b.Property<int>("DomainID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomainID"));

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DomainID");

                    b.ToTable("Domain");
                });

            modelBuilder.Entity("Backend.Model.FileUpload", b =>
                {
                    b.Property<int>("FileUploadID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileUploadID"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("FileUploadID");

                    b.HasIndex("QuestionID");

                    b.ToTable("FileUploads");
                });

            modelBuilder.Entity("Backend.Model.FileUploadResponses", b =>
                {
                    b.Property<int>("FileUploadResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileUploadResponseID"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FileUploadID")
                        .HasColumnType("int");

                    b.Property<int>("ResponseID")
                        .HasColumnType("int");

                    b.HasKey("FileUploadResponseID");

                    b.HasIndex("FileUploadID");

                    b.HasIndex("ResponseID");

                    b.ToTable("FileUploadResponses");
                });

            modelBuilder.Entity("Backend.Model.Framework", b =>
                {
                    b.Property<int>("FrameworkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrameworkID"));

                    b.Property<string>("FrameworkName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FrameworkID");

                    b.ToTable("Framework");
                });

            modelBuilder.Entity("Backend.Model.FrameworkDetails", b =>
                {
                    b.Property<int>("FrameworkID")
                        .HasColumnType("int");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FrameworkID");

                    b.ToTable("FrameworkDetails");
                });

            modelBuilder.Entity("Backend.Model.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Backend.Model.Option", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionID"));

                    b.Property<string>("OptionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("OptionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("Backend.Model.OptionResponses", b =>
                {
                    b.Property<int>("OptionResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionResponseID"));

                    b.Property<int>("OptionID")
                        .HasColumnType("int");

                    b.Property<int>("ResponseID")
                        .HasColumnType("int");

                    b.HasKey("OptionResponseID");

                    b.HasIndex("OptionID");

                    b.HasIndex("ResponseID");

                    b.ToTable("OptionResponses");
                });

            modelBuilder.Entity("Backend.Model.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DomainID")
                        .HasColumnType("int");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int?>("ParentQuestionID")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("DomainID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Backend.Model.QuestionFramework", b =>
                {
                    b.Property<int>("QuestionFrameworkID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionFrameworkID"));

                    b.Property<int>("FrameworkID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("QuestionFrameworkID");

                    b.HasIndex("FrameworkID");

                    b.HasIndex("QuestionID");

                    b.ToTable("QuestionFramework");
                });

            modelBuilder.Entity("Backend.Model.QuestionQuestionnaire", b =>
                {
                    b.Property<int>("QuestionQuestionnaireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionQuestionnaireID"));

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.HasKey("QuestionQuestionnaireID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("QuestionnaireID");

                    b.ToTable("QuestionQuestionnaire");
                });

            modelBuilder.Entity("Backend.Model.Questionnaire", b =>
                {
                    b.Property<int>("QuestionnaireID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionnaireID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("QuestionnaireID");

                    b.ToTable("Questionnaires");
                });

            modelBuilder.Entity("Backend.Model.QuestionnaireAssignment", b =>
                {
                    b.Property<int>("AssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentID"));

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuestionnaireID")
                        .HasColumnType("int");

                    b.Property<int>("StatusID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("AssignmentID");

                    b.HasIndex("QuestionnaireID");

                    b.HasIndex("StatusID");

                    b.HasIndex("VendorID");

                    b.ToTable("QuestionnaireAssignments");
                });

            modelBuilder.Entity("Backend.Model.Responses", b =>
                {
                    b.Property<int>("ResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResponseID"));

                    b.Property<int>("AssignmentID")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.HasKey("ResponseID");

                    b.HasIndex("AssignmentID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("Backend.Model.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Backend.Model.Status", b =>
                {
                    b.Property<int>("StatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusID"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StatusID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("Backend.Model.TextBoxResponses", b =>
                {
                    b.Property<int>("TextBoxResponseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TextBoxResponseID"));

                    b.Property<int>("ResponseID")
                        .HasColumnType("int");

                    b.Property<int>("TextBoxID")
                        .HasColumnType("int");

                    b.Property<string>("TextValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TextBoxResponseID");

                    b.HasIndex("ResponseID");

                    b.HasIndex("TextBoxID");

                    b.ToTable("TextBoxResponses");
                });

            modelBuilder.Entity("Backend.Model.Textbox", b =>
                {
                    b.Property<int>("TextBoxID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TextBoxID"));

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("int");

                    b.Property<int>("QuestionID")
                        .HasColumnType("int");

                    b.Property<int>("UOMID")
                        .HasColumnType("int");

                    b.HasKey("TextBoxID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("UOMID");

                    b.ToTable("Textboxes");
                });

            modelBuilder.Entity("Backend.Model.Tier", b =>
                {
                    b.Property<int>("TierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TierId"));

                    b.Property<string>("TierName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TierId");

                    b.ToTable("Tier");
                });

            modelBuilder.Entity("Backend.Model.UnitOfMeasurement", b =>
                {
                    b.Property<int>("UOMID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UOMID"));

                    b.Property<string>("UOMType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UOMID");

                    b.ToTable("UnitOfMeasurement");
                });

            modelBuilder.Entity("Backend.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Contact_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Backend.Model.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TierID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<string>("VendorAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorRegistration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VendorID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("TierID");

                    b.HasIndex("UserID");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("Backend.Model.VendorHierarchy", b =>
                {
                    b.Property<int>("HierarchyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HierarchyID"));

                    b.Property<int>("ChildVendorID")
                        .HasColumnType("int");

                    b.Property<int>("ParentVendorID")
                        .HasColumnType("int");

                    b.HasKey("HierarchyID");

                    b.HasIndex("ChildVendorID");

                    b.HasIndex("ParentVendorID");

                    b.ToTable("vendorHierarchy");
                });

            modelBuilder.Entity("Backend.Model.FileUpload", b =>
                {
                    b.HasOne("Backend.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Backend.Model.FileUploadResponses", b =>
                {
                    b.HasOne("Backend.Model.FileUpload", "FileUpload")
                        .WithMany()
                        .HasForeignKey("FileUploadID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Responses", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileUpload");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Backend.Model.FrameworkDetails", b =>
                {
                    b.HasOne("Backend.Model.Framework", "Framework")
                        .WithMany()
                        .HasForeignKey("FrameworkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");
                });

            modelBuilder.Entity("Backend.Model.Notification", b =>
                {
                    b.HasOne("Backend.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Model.Option", b =>
                {
                    b.HasOne("Backend.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Backend.Model.OptionResponses", b =>
                {
                    b.HasOne("Backend.Model.Option", "Option")
                        .WithMany()
                        .HasForeignKey("OptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Responses", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("Backend.Model.Question", b =>
                {
                    b.HasOne("Backend.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("Backend.Model.QuestionFramework", b =>
                {
                    b.HasOne("Backend.Model.Framework", "Framework")
                        .WithMany()
                        .HasForeignKey("FrameworkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Framework");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Backend.Model.QuestionQuestionnaire", b =>
                {
                    b.HasOne("Backend.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("Questionnaire");
                });

            modelBuilder.Entity("Backend.Model.QuestionnaireAssignment", b =>
                {
                    b.HasOne("Backend.Model.Questionnaire", "Questionnaire")
                        .WithMany()
                        .HasForeignKey("QuestionnaireID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questionnaire");

                    b.Navigation("Status");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Backend.Model.Responses", b =>
                {
                    b.HasOne("Backend.Model.QuestionnaireAssignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Backend.Model.TextBoxResponses", b =>
                {
                    b.HasOne("Backend.Model.Responses", "Response")
                        .WithMany()
                        .HasForeignKey("ResponseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Textbox", "TextBox")
                        .WithMany()
                        .HasForeignKey("TextBoxID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Response");

                    b.Navigation("TextBox");
                });

            modelBuilder.Entity("Backend.Model.Textbox", b =>
                {
                    b.HasOne("Backend.Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.UnitOfMeasurement", "UnitOfMeasurement")
                        .WithMany()
                        .HasForeignKey("UOMID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("UnitOfMeasurement");
                });

            modelBuilder.Entity("Backend.Model.User", b =>
                {
                    b.HasOne("Backend.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Backend.Model.Vendor", b =>
                {
                    b.HasOne("Backend.Model.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.Tier", "Tier")
                        .WithMany()
                        .HasForeignKey("TierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tier");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Model.VendorHierarchy", b =>
                {
                    b.HasOne("Backend.Model.Vendor", null)
                        .WithMany()
                        .HasForeignKey("ChildVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Model.Vendor", null)
                        .WithMany()
                        .HasForeignKey("ParentVendorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
